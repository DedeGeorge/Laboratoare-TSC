# 1
# Model Technology ModelSim SE vlog 6.6d Compiler 2010.11 Nov  1 2010
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling module instr_register_test
# -- Compiling interface tb_ifc
# -- Compiling module top
# 
# Top level modules:
# 	top
# vsim +notimingchecks +nowarnTSCALE -sva -nocoverage -quiet -sv_seed 77777 -novopt top 
# Refreshing C:\Users\User\Desktop\Galaju\laborator complet\sim\work.instr_register_pkg
# Refreshing C:\Users\User\Desktop\Galaju\laborator complet\sim\work.top
# Refreshing C:\Users\User\Desktop\Galaju\laborator complet\sim\work.tb_ifc
# Refreshing C:\Users\User\Desktop\Galaju\laborator complet\sim\work.instr_register_test
# Refreshing C:\Users\User\Desktop\Galaju\laborator complet\sim\work.instr_register
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(79): Clocking block output interfata_lab.cb.opcode is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(80): Clocking block output interfata_lab.cb.operand_a is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(81): Clocking block output interfata_lab.cb.operand_b is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(78): Clocking block output interfata_lab.cb.write_pointer is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(86): Clocking block output interfata_lab.cb.read_pointer is not legal in this
# or another expression.
#         Region: /top/test
# ** Error: (vish-4014) No objects found matching '/top/test/interfata_lab/result'.
# Executing ONERROR command at macro ./wave.do line 14
# 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# Writing to register location 0: 
#   opcode = 2 (PASSB)
#   operand_a = 4
#   operand_b = 1
# 
# Time=                   20
# Writing to register location 1: 
#   opcode = 2 (PASSB)
#   operand_a = 1
#   operand_b = 0
# 
# Time=                   30
# Writing to register location 2: 
#   opcode = 4 (SUB)
#   operand_a = 13
#   operand_b = 10
# 
# Time=                   40
# Writing to register location 3: 
#   opcode = 5 (MULT)
#   operand_a = 15
#   operand_b = 5
# 
# Time=                   50
# Writing to register location 4: 
#   opcode = 2 (PASSB)
#   operand_a = 11
#   operand_b = 7
# 
# Time=                   60
# Writing to register location 5: 
#   opcode = 4 (SUB)
#   operand_a = 15
#   operand_b = 13
# 
# Time=                   70
# Writing to register location 6: 
#   opcode = 4 (SUB)
#   operand_a = 6
#   operand_b = 8
# 
# Time=                   80
# Writing to register location 7: 
#   opcode = 5 (MULT)
#   operand_a = 2
#   operand_b = 14
# 
# Time=                   90
# Writing to register location 8: 
#   opcode = 2 (PASSB)
#   operand_a = 4
#   operand_b = 8
# 
# Time=                  100
# Writing to register location 9: 
#   opcode = 2 (PASSB)
#   operand_a = 12
#   operand_b = 3
# 
# Time=                  110
# 
# Reading back the same register locations written...
# Read from register location 0: 
#   opcode = 2 (PASSB)
#   operand_a = 4
#   operand_b = 1
# 
# 	result = 0
# 
# Read from register location 1: 
#   opcode = 2 (PASSB)
#   operand_a = 1
#   operand_b = 0
# 
# 	result = 0
# 
# Read from register location 2: 
#   opcode = 4 (SUB)
#   operand_a = 13
#   operand_b = 10
# 
# 	result = 3
# 
# Read from register location 3: 
#   opcode = 5 (MULT)
#   operand_a = 15
#   operand_b = 5
# 
# 	result = 75
# 
# Read from register location 4: 
#   opcode = 2 (PASSB)
#   operand_a = 11
#   operand_b = 7
# 
# 	result = 0
# 
# Read from register location 5: 
#   opcode = 4 (SUB)
#   operand_a = 15
#   operand_b = 13
# 
# 	result = 2
# 
# Read from register location 6: 
#   opcode = 4 (SUB)
#   operand_a = 6
#   operand_b = 8
# 
# 	result = -2
# 
# Read from register location 7: 
#   opcode = 5 (MULT)
#   operand_a = 2
#   operand_b = 14
# 
# 	result = 28
# 
# Read from register location 8: 
#   opcode = 2 (PASSB)
#   operand_a = 4
#   operand_b = 8
# 
# 	result = 0
# 
# Read from register location 9: 
#   opcode = 2 (PASSB)
#   operand_a = 12
#   operand_b = 3
# 
# 	result = 0
# 
# Read from register location 10: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
# 	result = 0
# 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# ** Note: $finish    : ../lab01_testbench-interface/instr_register_test.sv(58)
#    Time: 230 ns  Iteration: 2  Instance: /top/test
# 1
# Break in Task run at ../lab01_testbench-interface/instr_register_test.sv line 58
# Simulation Breakpoint: 1
# Break in Task run at ../lab01_testbench-interface/instr_register_test.sv line 58
# MACRO ./run.do PAUSED at line 44
